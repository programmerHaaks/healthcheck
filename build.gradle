/*
 * Copyright 2022 Storebrand ASA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// GradleWrapper version specifier.
wrapper {
    gradleVersion = "7.5.1"
    setDistributionType(Wrapper.DistributionType.ALL)
}

allprojects {
    group = 'com.storebrand.healthcheck'
    version = '0.4.1+2024-05-07'
}

subprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'java-library'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileJava {
        options.encoding = 'UTF-8'
        options.deprecation = true
        options.incremental = true
        options.compilerArgs += ['-Werror', '-Xlint:all', '-Xlint:-serial']
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    javadoc {
        // without the -quiet option, the build fails due to errors&warns
        options.addStringOption('Xdoclint:none', '-quiet')
    }


    // Common versions
    ext {
        slf4jVersion = '1.7.36' // compileOnly
        springVersion = '5.3.27'
        jacksonVersion = '2.15.0'
        classgraphVersion = '4.8.157'
        javaxInjectVersion = '1'

        // === TESTING only:
        junitVersion = '4.13.2'
        logbackVersion = '1.3.7' // 1.4 requires JDK 11
        mockitoVersion = '5.3.1'
    }

    project.buildDir = 'build-gradle'

    repositories { mavenCentral() }

    task allDependencies(type: DependencyReportTask) {}

    // ------------------------------------------------------------------------------------------
    // Local release configuration. The release file is not checked in to version control,
    // and should instead be kept locally to configure how to deploy this.
    if (file("${ rootProject.projectDir }/repositories.gradle").exists()) {
        apply from: "${ rootProject.projectDir }/repositories.gradle"
    }

    // ------------------------------------------------------------------------------------------
    // Maven Central publishing configuration, via Sonatype

    signing {
        def signingKeyId = findProperty("signingKeyId") as String ?: "Either project prop, or env with prefix ORG_GRADLE_PROJECT"
        def signingKey = findProperty("signingKey") as String ?: "Either project prop, or env with prefix ORG_GRADLE_PROJECT"
        def signingPassword = findProperty("signingPassword") as String ?: "Either project prop, or env with prefix ORG_GRADLE_PROJECT"
        useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)

        sign publishing.publications
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                pom {
                    name = 'Storebrand HealthCheck'
                    description = 'Java library that makes it easy to report the current health of a service.'
                    url = 'https://github.com/storebrand/healthcheck'
                    licenses {
                        license {
                            name = 'Apache License 2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0'
                        }
                    }
                    developers {
                        developer {
                            id = 'stolsvik'
                            name = 'Endre St√∏lsvik'
                            email = 'endre@stolsvik.com'
                        }
                        developer {
                            id = 'khiim'
                            name = 'Kristian Hiim'
                            email = 'kristian@hiim.no'
                        }
                    }
                    scm {
                        connection = 'scm:git:https://github.com/storebrand/healthcheck.git'
                        developerConnection = 'scm:git:ssh://github.com:storebrand/healthcheck.git'
                        url = 'https://github.com/storebrand/healthcheck'
                    }
                }
                from components.java
            }
        }
        repositories {
            maven {
                name 'SonatypeOSSRHSnapshot'
                // NOTE: GroupId no.storebrand uses "oss.sonatype.org", while com.storebrand uses "s01.oss.sonatype.org"
                // url 'https://oss.sonatype.org/content/repositories/snapshots'
                url 'https://s01.oss.sonatype.org/content/repositories/snapshots'
                credentials {
                    // using findProperty(..) to be able to build without it being defined.
                    username findProperty('sonatypeUsername') as String ?: "Either project prop, or env with prefix ORG_GRADLE_PROJECT"
                    password findProperty('sonatypePassword') as String ?: "Either project prop, or env with prefix ORG_GRADLE_PROJECT"
                }
            }
            maven {
                name 'SonatypeOSSRHStaging'
                // NOTE: GroupId no.storebrand uses "oss.sonatype.org", while com.storebrand uses "s01.oss.sonatype.org"
                // url 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
                url 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2'
                credentials {
                    // using findProperty(..) to be able to build without it being defined.
                    username findProperty('sonatypeUsername') as String ?: "Either project prop, or env with prefix ORG_GRADLE_PROJECT"
                    password findProperty('sonatypePassword') as String ?: "Either project prop, or env with prefix ORG_GRADLE_PROJECT"
                }
            }
        }
    }
    // "Alias-tasks" to publish to Sonatype's OSSRH (OSS Repository Hosting), Snapshot and Staging
    task publishSnapshot(dependsOn: [publishAllPublicationsToSonatypeOSSRHSnapshotRepository])
    task publishStaging(dependsOn: [publishAllPublicationsToSonatypeOSSRHStagingRepository])
}
